// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(dinnerContext))]
    [Migration("20220709152826_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("DAL.Data.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("dish", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Первое блюдо",
                            Position = 1,
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Второе блюдо",
                            Position = 2,
                            Price = 0m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Борщ",
                            Position = 1,
                            Price = 200m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Окрошка",
                            Position = 1,
                            Price = 200m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Солянка",
                            Position = 1,
                            Price = 220m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Щи из свежей капустой",
                            Position = 1,
                            Price = 200m
                        },
                        new
                        {
                            Id = 8,
                            Name = "Рассольник",
                            Position = 1,
                            Price = 200m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Уха",
                            Position = 1,
                            Price = 220m
                        },
                        new
                        {
                            Id = 10,
                            Name = "Лапша с курицей",
                            Position = 1,
                            Price = 180m
                        },
                        new
                        {
                            Id = 11,
                            Name = "Паста Карбонара",
                            Position = 2,
                            Price = 250m
                        },
                        new
                        {
                            Id = 12,
                            Name = "Пюре с котлетой",
                            Position = 2,
                            Price = 225m
                        },
                        new
                        {
                            Id = 13,
                            Name = "Хинкали",
                            Position = 2,
                            Price = 230m
                        },
                        new
                        {
                            Id = 14,
                            Name = "Макароны с курицей",
                            Position = 2,
                            Price = 180m
                        });
                });

            modelBuilder.Entity("DAL.Data.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<sbyte>("IsActive")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("menu", (string)null);

                    b.HasData(
                        new { Id = 1, Date = new DateTime(2022, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 2, Date = new DateTime(2022, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 3, Date = new DateTime(2022, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 4, Date = new DateTime(2022, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 5, Date = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 6, Date = new DateTime(2022, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 7, Date = new DateTime(2022, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 8, Date = new DateTime(2022, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 9, Date = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 10, Date = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 11, Date = new DateTime(2022, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 12, Date = new DateTime(2022, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 13, Date = new DateTime(2022, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 14, Date = new DateTime(2022, 7, 24, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 15, Date = new DateTime(2022, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 16, Date = new DateTime(2022, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 17, Date = new DateTime(2022, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 18, Date = new DateTime(2022, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 19, Date = new DateTime(2022, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 20, Date = new DateTime(2022, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 21, Date = new DateTime(2022, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 22, Date = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 23, Date = new DateTime(2022, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 24, Date = new DateTime(2022, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 25, Date = new DateTime(2022, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 26, Date = new DateTime(2022, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 27, Date = new DateTime(2022, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 28, Date = new DateTime(2022, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 29, Date = new DateTime(2022, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 30, Date = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 31, Date = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 32, Date = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 33, Date = new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 34, Date = new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 35, Date = new DateTime(2022, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 36, Date = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 37, Date = new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 38, Date = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 39, Date = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 40, Date = new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 41, Date = new DateTime(2022, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 42, Date = new DateTime(2022, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 43, Date = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 44, Date = new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 45, Date = new DateTime(2022, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 46, Date = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 47, Date = new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 48, Date = new DateTime(2022, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 49, Date = new DateTime(2022, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 50, Date = new DateTime(2022, 8, 29, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 51, Date = new DateTime(2022, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 52, Date = new DateTime(2022, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 53, Date = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 54, Date = new DateTime(2022, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 55, Date = new DateTime(2022, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 56, Date = new DateTime(2022, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 57, Date = new DateTime(2022, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 58, Date = new DateTime(2022, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 59, Date = new DateTime(2022, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 60, Date = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)1 },
                        new { Id = 61, Date = new DateTime(2022, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 },
                        new { Id = 62, Date = new DateTime(2022, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = (sbyte)0 }
                    );
                });

            modelBuilder.Entity("DAL.Data.MenuDish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Dish")
                        .HasColumnType("int");

                    b.Property<int>("Menu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Dish" }, "dish_idx");

                    b.HasIndex(new[] { "Menu" }, "menu_idx");

                    b.ToTable("menu_dish", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dish = 4,
                            Menu = 1
                        },
                        new
                        {
                            Id = 2,
                            Dish = 11,
                            Menu = 1
                        },
                        new
                        {
                            Id = 3,
                            Dish = 6,
                            Menu = 2
                        },
                        new
                        {
                            Id = 4,
                            Dish = 12,
                            Menu = 2
                        },
                        new
                        {
                            Id = 5,
                            Dish = 7,
                            Menu = 3
                        },
                        new
                        {
                            Id = 6,
                            Dish = 14,
                            Menu = 3
                        },
                        new
                        {
                            Id = 7,
                            Dish = 4,
                            Menu = 4
                        },
                        new
                        {
                            Id = 8,
                            Dish = 11,
                            Menu = 4
                        },
                        new
                        {
                            Id = 9,
                            Dish = 5,
                            Menu = 5
                        },
                        new
                        {
                            Id = 10,
                            Dish = 13,
                            Menu = 5
                        });
                });

            modelBuilder.Entity("DAL.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<sbyte>("IsApproved")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");
                    
                    b.Property<string>("RefreshToken")
                        .IsRequired(false)
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 8,
                            Email = "reksmbd@gmail.com",
                            IsApproved = (sbyte)1,
                            Name = "MishaBausov",
                            Password = "1U+u9QwJ8SdXuiRip3b83S7jiu06Z0PxlaPHFOJZJ+Q=:tiUz98Ow0IbpP7gWSLBCcA==",
                            Role = "user"
                        },
                        new
                        {
                            Id = 9,
                            Email = "admin@gmail.com",
                            IsApproved = (sbyte)1,
                            Name = "Admin1",
                            Password = "8eqn6A6N11WY0k4j8PLlVfcmDvnUQZJOvTtxdBYtINA=:5tZTJitFXi/473n+fWFzog==",
                            Role = "admin"
                        },
                        new
                        {
                            Id = 10,
                            Email = "cook@gmail.com",
                            IsApproved = (sbyte)1,
                            Name = "Cook1",
                            Password = "ucPtmgnShnsbFBQVZg7kNukEDDluMTr2/fYAq3odDF8=:amw/M3NvUh1kzCQkIJnVIg==",
                            Role = "cook"
                        });
                });

            modelBuilder.Entity("DAL.Data.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<sbyte>("IsReady")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "user_idx");

                    b.ToTable("record", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReady = (sbyte)0,
                            Price = 450m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReady = (sbyte)0,
                            Price = 225m,
                            UserId = 8
                        });
                });

            modelBuilder.Entity("DAL.Data.RecordDish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Dish")
                        .HasColumnType("int");

                    b.Property<int>("Record")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Dish" }, "dish_idx")
                        .HasDatabaseName("dish_idx1");

                    b.HasIndex(new[] { "Record" }, "recordId_idx");

                    b.ToTable("record_dish", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dish = 1,
                            Record = 1
                        },
                        new
                        {
                            Id = 2,
                            Dish = 8,
                            Record = 1
                        },
                        new
                        {
                            Id = 3,
                            Dish = 9,
                            Record = 2
                        });
                });

            modelBuilder.Entity("DAL.Data.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Admin")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("User")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Admin" }, "admin_idx");

                    b.HasIndex(new[] { "User" }, "user_idx")
                        .HasDatabaseName("user_idx1");

                    b.ToTable("transaction", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Admin = 9,
                            Date = new DateTime(2022, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 225m,
                            User = 8
                        });
                });

            modelBuilder.Entity("DAL.Data.MenuDish", b =>
                {
                    b.HasOne("DAL.Data.Dish", "DishNavigation")
                        .WithMany("MenuDishes")
                        .HasForeignKey("Dish")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dish");

                    b.HasOne("DAL.Data.Menu", "MenuNavigation")
                        .WithMany("MenuDishes")
                        .HasForeignKey("Menu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("menu");

                    b.Navigation("DishNavigation");

                    b.Navigation("MenuNavigation");
                });

            modelBuilder.Entity("DAL.Data.Record", b =>
                {
                    b.HasOne("DAL.Data.User", "User")
                        .WithMany("Records")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userFK");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Data.RecordDish", b =>
                {
                    b.HasOne("DAL.Data.Dish", "DishNavigation")
                        .WithMany("RecordDishes")
                        .HasForeignKey("Dish")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dishId");

                    b.HasOne("DAL.Data.Record", "RecordNavigation")
                        .WithMany("RecordDishes")
                        .HasForeignKey("Record")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("recordId");

                    b.Navigation("DishNavigation");

                    b.Navigation("RecordNavigation");
                });

            modelBuilder.Entity("DAL.Data.Transaction", b =>
                {
                    b.HasOne("DAL.Data.User", "AdminNavigation")
                        .WithMany("TransactionAdminNavigations")
                        .HasForeignKey("Admin")
                        .HasConstraintName("admin");

                    b.HasOne("DAL.Data.User", "UserNavigation")
                        .WithMany("TransactionUserNavigations")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user");

                    b.Navigation("AdminNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("DAL.Data.Dish", b =>
                {
                    b.Navigation("MenuDishes");

                    b.Navigation("RecordDishes");
                });

            modelBuilder.Entity("DAL.Data.Menu", b =>
                {
                    b.Navigation("MenuDishes");
                });

            modelBuilder.Entity("DAL.Data.Record", b =>
                {
                    b.Navigation("RecordDishes");
                });

            modelBuilder.Entity("DAL.Data.User", b =>
                {
                    b.Navigation("Records");

                    b.Navigation("TransactionAdminNavigations");

                    b.Navigation("TransactionUserNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
